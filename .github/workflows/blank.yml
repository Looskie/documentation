name: Auto tag
  # You may pin to the exact commit or the version.
  # uses: Klemensas/action-autotag@380682c329fccb8b270e70e59d40d0e918dc5a0f
  uses: Klemensas/action-autotag@1.2.3
  with:
    # Autotag will look for the package.json file in in this location.
    package_root: # optional, default is ./
    # By default, package.json uses semantic versioning, such as "1.0.0". A prefix can be used to add text before the tag name. For example, if tag_prefx is set to "v", then the tag would be labeled as "v1.0.0".
    tag_prefix: # optional
    # Text which is applied to the end of the tag.
    tag_suffix: # optional
    # This is the annotated commit message associated with the tag. By default, a changelog will be generated from the commits between the latest tag and the new tag (HEAD). This will override that with a hard-coded message.
    tag_message: # optional
    # A string denoting changelog format. Supports `{{message}}`, {{messageHeadline}}, `{{author}}` and `{{sha}}`. Defaults to `**1) {{message}}** {{author}}
(SHA: {{sha}})
` Only used when tag_message is empty.
    changelog_structure: # optional
    # Explicitly set the version here instead of automatically detecting from `package.json`. Useful for non-JavaScript projects where version may be output by a previous action.
    version: # optional

name: Auto tag
  # You may pin to the exact commit or the version.
  # uses: Klemensas/action-autotag@380682c329fccb8b270e70e59d40d0e918dc5a0f
  uses: Klemensas/action-autotag@1.2.3
  with:
    # Autotag will look for the package.json file in in this location.
    package_root: # optional, default is ./
    # By default, package.json uses semantic versioning, such as "1.0.0". A prefix can be used to add text before the tag name. For example, if tag_prefx is set to "v", then the tag would be labeled as "v1.0.0".
    tag_prefix: # optional
    # Text which is applied to the end of the tag.
    tag_suffix: # optional
    # This is the annotated commit message associated with the tag. By default, a changelog will be generated from the commits between the latest tag and the new tag (HEAD). This will override that with a hard-coded message.
    tag_message: # optional
    # A string denoting changelog format. Supports `{{message}}`, {{messageHeadline}}, `{{author}}` and `{{sha}}`. Defaults to `**1) {{message}}** {{author}}
(SHA: {{sha}})
` Only used when tag_message is empty.
    changelog_structure: # optional
    # Explicitly set the version here instead of automatically detecting from `package.json`. Useful for non-JavaScript projects where version may be output by a previous action.
    version: # optional
    
name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.    
